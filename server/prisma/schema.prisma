// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define a single table that combines all the fields
model OrderTracker {
  id        Int      @id @default(autoincrement())
  orderDate DateTime

  // Shipment details
  shipmentDate   DateTime?
  shipmentStatus Boolean   @default(false) // false means "yollanmadÄ±"

  // Invoice details
  invoiceStatus Boolean @default(false) // false means "kesildi"
  invoiceNO     String

  // Project details
  projectNO   String
  projectName String
  tableCount  Int
  projectLink String

  // Company details
  company      String
  investorName String?

  // Location details
  city      String
  latitude  Float // Enlem
  longitude Float // Boylam

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Project   Project? @relation(fields: [projectNO], references: [projectNO],"ProjectToOrders")
}

model Customer {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  companyName String
  email       String?
  phone       String?

  // Relation fields
  projects Project[] @relation("CustomerToProject")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int     @id @default(autoincrement())
  projectNO   String  @unique
  tableCount  Int
  projectLink String?
  city        String
  latitude    Float
  longitude   Float

  EPC String?

  // Relation fields
  customerName String?
  customer     Customer? @relation("CustomerToProject", fields: [customerName], references: [name], onDelete: SetNull)

  controlCards ControlCard[] @relation("ProjectToControlCards")

  faultyCards FaultyCard[]   @relation("ProjectToFaultyCards")
  orders      OrderTracker[] @relation("ProjectToOrders")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ControlCard {
  id           Int      @id @default(autoincrement())
  UNID         String   @unique
  orderNumber  Int // Equals to TrackerID or DSID
  revisionNO   String
  revisionDate DateTime
  manufacturer String
  isActive     Boolean
  depotShelfNo String
  projectNO    String?

  // Relation fields
  cardParameters CardParameter[] @relation("ControlCardToCardParameters")
  project        Project?        @relation("ProjectToControlCards", fields: [projectNO], references: [projectNO], onDelete: SetNull)
  faultyCards    FaultyCard[]    @relation("ControlCardToFaultyCards")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CardParameter {
  id          Int     @id @default(autoincrement())
  UNID        String? // UNID optional
  parameterNO String
  parameter   String
  value       String

  // Relation fields
  controlCard ControlCard? @relation("ControlCardToCardParameters", fields: [UNID], references: [UNID], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([UNID, parameter])
  // Index to speed up queries on UNID
  @@index([UNID])
}

model FaultyCard {
  id Int @id @default(autoincrement())

  UNID       String
  servisDate DateTime
  status     String
  fault      String
  photoURL   String[]

  projectNO String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Project     Project?     @relation(fields: [projectNO], references: [projectNO], onDelete: Cascade, "ProjectToFaultyCards")
  ControlCard ControlCard? @relation(fields: [UNID], references: [UNID], onDelete: Cascade, "ControlCardToFaultyCards")

  projectId Int?
}

// actuator      String
// powerSupply    String
// keyboard
// screen 

model Stock {
  id          Int             @id @default(autoincrement())
  stockName   String          @unique
  stockType   String
  quantity    Int
  duration    String?
  // inStock     Int?
  cost        Float?
  company     String?
  description String?
  photoURL    String[]
  movements   StockMovement[] // Relation to StockMovement

  BillOfProductItems BillOfProductItem[] // Relation to BillOfProductItem

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockMovement {
  id           Int       @id @default(autoincrement())
  stockName    String // Foreign key field
  movementType String
  quantity     Int
  requested    Int?
  movement     String?
  boxQuantity  Int?
  need         Int?
  date         DateTime?
  description  String?
  // Relation to Stock
  stock        Stock     @relation(fields: [stockName], references: [stockName])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BillOfProduct {
  id          Int      @id @default(autoincrement())
  billName    String   @unique
  billDate    DateTime
  description String?

  // totalCost       Float?
  // Relations
  items           BillOfProductItem[]
  productionOrder ProductionOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BillOfProductItem {
  id Int @id @default(autoincrement())

  quantity Int // Quantity of the stock required for the BillOfProduct

  billOfProductId Int
  stockId         Int

  // Relations
  BillOfProduct BillOfProduct @relation(fields: [billOfProductId], references: [id], onDelete: Cascade)
  stock         Stock         @relation(fields: [stockId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([billOfProductId, stockId])
}

model ProductionOrder {
  id        Int      @id @default(autoincrement())
  orderNO   String
  quantity  Int
  orderDate DateTime

  description     String?
  // totalCost       Float?
  // Relations
  billOfProductId Int
  BillOfProduct   BillOfProduct @relation(fields: [billOfProductId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

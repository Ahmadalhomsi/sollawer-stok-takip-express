// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define a single table that combines all the fields
model OrderTracker {
  id        Int      @id @default(autoincrement())
  orderDate DateTime

  // Shipment details
  shipmentDate   DateTime?
  shipmentStatus Boolean   @default(false) // false means "yollanmadÄ±"

  // Invoice details
  invoiceStatus Boolean @default(false) // false means "kesildi"
  invoiceNO     String

  // Project details
  projectNO   String
  projectName String
  tableCount  Int
  projectLink String

  // Company details
  company      String
  investorName String?

  // Location details
  city      String
  latitude  Float // Enlem
  longitude Float // Boylam
}

model Customer {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  companyName String
  email       String?
  phone       String?

  // Relation fields
  projects Project[] @relation("CustomerToProject")
}

model Project {
  id          Int     @id @default(autoincrement())
  projectNO   String  @unique
  tableCount  Int
  projectLink String?
  city        String
  latitude    Float
  longitude   Float

  // Relation fields
  customerName String?
  customer     Customer? @relation("CustomerToProject", fields: [customerName], references: [name])

  controlCards ControlCard[] @relation("ProjectToControlCards")
}

model ControlCard {
  id           Int      @id @default(autoincrement())
  UNID         String   @unique
  orderNumber  Int // Equals to TrackerID or DSID
  revisionNO   String
  revisionDate DateTime
  manufacturer String
  isActive     Boolean
  depotShelfNo String
  projectNO    String?

  // Relation fields
  cardParameters CardParameter[] @relation("ControlCardToCardParameters")
  project        Project?        @relation("ProjectToControlCards", fields: [projectNO], references: [projectNO])
}

model CardParameter {
  id          Int     @id @default(autoincrement())
  UNID        String? // UNID optional
  parameterNO String
  parameter   String
  value       String

  // Relation fields
  controlCard ControlCard? @relation("ControlCardToCardParameters", fields: [UNID], references: [UNID])

  @@unique([UNID, parameter])
  // Index to speed up queries on UNID
  @@index([UNID])
}

model FaultyCard {
  id Int @id @default(autoincrement())

  cardID     String
  servisDate DateTime
  status     String
  fault      String
  photoURL   String[]
  projectNO  String
}


  // actuator      String
  // powerSupply    String
  // keyboard
  // screen


model Stock {
  id           Int      @id @default(autoincrement())
  stockName      String   @unique
  quantity   Int
  duration    String?
  requested  Int?
  inStock    Int?
  boxQuantity Int?
  need       Int?
  
  cost   Float?
  deliveryDate String?
  company      String?
  description String?
}
